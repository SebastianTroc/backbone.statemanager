// Generated by CoffeeScript 1.3.3

/*
Backbone.Statemanager, v0.0.1-alpha
Copyright (c)2012 Patrick Camacho and Mark Roseboom, Crashlytics
Distributed under MIT license
http://github.com/crashlytics/backbone.statemanager
*/


(function() {

  Backbone.StateManager = (function(Backbone, _) {
    var StateManager, _recursiveBindAll;
    StateManager = function(states, options) {
      var _this = this;
      this.options = options != null ? options : {};
      this.states = {};
      if (_.isObject(states)) {
        return _.each(states, function(value, key) {
          return _this.addState(key, value);
        });
      }
    };
    StateManager.extend = Backbone.View.extend;
    _.extend(StateManager.prototype, Backbone.Events, {
      addState: function(state, callbacks) {
        return this.states[state] = callbacks;
      },
      removeState: function(state) {
        return delete this.states[state];
      },
      getCurrentState: function() {
        return this.currentState;
      },
      initialize: function(options) {
        var initial,
          _this = this;
        if (options == null) {
          options = {};
        }
        if (initial = _.chain(this.states).keys().find(function(state) {
          return _this.states[state].initial;
        }).value()) {
          return this.triggerState(initial, options);
        }
      },
      triggerState: function(state, options) {
        if (options == null) {
          options = {};
        }
      }
    });
    StateManager.addStateManager = function(target, options) {
      var stateManager;
      if (options == null) {
        options = {};
      }
      if (!target) {
        new Error('Target must be defined');
      }
      _recursiveBindAll(target, target.states);
      stateManager = new Backbone.StateManager(target.states, options);
      target.triggerState = function() {
        return stateManager.triggerState.apply(stateManager, arguments);
      };
      target.getCurrentState = function() {
        return stateManager.getCurrentState();
      };
      if (options.initialize || _.isUndefined(options.initialize)) {
        stateManager.initialize(options);
      }
      return delete target.states;
    };
    _recursiveBindAll = function(target, object) {
      return _.each(object, function(property) {
        if (_.isFunction(property)) {
          return _.bind(property, target);
        } else if (_.isObject(property)) {
          return _recursiveBindAll(target, property);
        }
      });
    };
    return StateManager;
  })(Backbone, _);

}).call(this);
