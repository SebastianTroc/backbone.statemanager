// Generated by CoffeeScript 1.3.3

/*
Backbone.Statemanager, v0.0.1-alpha
Copyright (c)2012 Patrick Camacho and Mark Roseboom, Crashlytics
Distributed under MIT license
http://github.com/crashlytics/backbone.statemanager
*/


(function() {

  Backbone.StateManager = (function(Backbone, _) {
    var StateManager, _prependArguments;
    StateManager = function() {
      this.states = {};
      return this;
    };
    StateManager.extend = Backbone.View.extend;
    _.extend(StateManager.prototype, {
      addState: function(state, callbacks) {
        return this.states[state] = callbacks;
      },
      removeState: function(state) {
        return delete this.states[state];
      },
      triggerState: function(obj, state, options) {
        var currentState, matchedState;
        if (options == null) {
          options = {};
        }
        if (!(matchedState = this._matchState(state))) {
          return false;
        }
        currentState = this.currentState;
        if (!currentState || (currentState !== state && options.exactMatch) || this.states[currentState] !== matchedState) {
          this.exitState(obj, currentState, matchedState, options);
          this.enterState(obj, matchedState, currentState, options);
          return this;
        } else if (this.options.reEnter) {
          this.exitState(obj, currentState, matchedState, options);
          this.enterState(obj, matchedState, currentState, options);
          return this;
        } else {
          return false;
        }
      },
      enterState: function(obj, state, options) {
        var _ref;
        if (!(((_ref = this.states) != null ? _ref[state] : void 0) && _.isFunction(this.states[state].enter))) {
          return false;
        }
        if (typeof obj.onBeforeStateEnter === "function") {
          obj.onBeforeStateEnter(state, options);
        }
        obj.trigger('before:state:enter', state, options);
        this.states[state].enter.apply(obj, options);
        this.currentState = state;
        if (typeof obj.onStateEnter === "function") {
          obj.onStateEnter(state, options);
        }
        obj.trigger('state:enter', state, options);
        return obj;
      },
      exitState: function(obj, state, options) {
        var _ref;
        if (!(((_ref = this.states) != null ? _ref[state] : void 0) && _.isFunction(this.states[state].exit))) {
          return false;
        }
        if (typeof obj.onBeforeStateExit === "function") {
          obj.onBeforeStateExit(state, options);
        }
        obj.trigger('before:state:exit', state, options);
        this.states[state].exit.apply(obj, options);
        this.previousState = state;
        delete this.currentState;
        if (typeof obj.onStateExit === "function") {
          obj.onStateExit(state, options);
        }
        obj.trigger('state:exit', state, options);
        return obj;
      },
      _matchState: function(state) {
        var stateRegex;
        if (!this.states) {
          return false;
        }
        stateRegex = Backbone.Router.prototype(state);
        return _.chain(this.states).keys().find(function(state) {
          return stateRegex.test(state);
        }).value();
      }
    });
    StateManager.addStateManager = function(target) {
      var stateManager;
      stateManager = new Backbone.StateManager();
      target.addState = function() {
        return stateManager.addState.apply(stateManager, arguments);
      };
      target.removeState = function() {
        return stateManager.removeState.apply(stateManager, arguments);
      };
      target.triggerState = function() {
        return stateManager.triggerState.apply(stateManager, _prependArguments(target, arguments));
      };
      target.enterState = function() {
        return stateManager.enterState.apply(stateManager, _prependArguments(target, arguments));
      };
      target.exitState = function() {
        return stateManager.exitState.apply(stateManager, _prependArguments(target, arguments));
      };
      target.getState = function() {
        return stateManager.getState();
      };
      target.getStates = function() {
        return stateManager._states;
      };
      if (_.isObject(target.states)) {
        _.each(target.states, function(key, value) {
          return StateManager.addState.call(target.stateManager, key, value);
        });
        delete target.states;
      }
      if (target.initialState) {
        return target.triggerState(target.initialState);
      }
    };
    _prependArguments = function(val, args) {
      return (args = Array.prototype.slice.call(args)).unshift(val) && args;
    };
    return StateManager;
  })(Backbone, _);

}).call(this);
