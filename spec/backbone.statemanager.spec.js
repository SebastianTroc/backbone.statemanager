// Generated by CoffeeScript 1.3.3
(function() {

  describe('Backbone.StateManager', function() {
    it('exists under Backbone.StateManager', function() {
      return expect(Backbone.StateManager).toBeDefined();
    });
    describe('constructor', function() {
      it('creates a states object', function() {
        var stateManager;
        stateManager = new Backbone.StateManager;
        return expect(stateManager.states).toBeDefined();
      });
      return it('calls addState with passed state', function() {
        var stateManager;
        spyOn(Backbone.StateManager.prototype, 'addState');
        stateManager = new Backbone.StateManager({
          foo: function() {}
        });
        return expect(stateManager.addState).toHaveBeenCalledWith('foo', jasmine.any(Function));
      });
    });
    describe('prototype', function() {
      describe('initialize', function() {
        return it('calls triggerState on the first state found that has initial : true set on it', function() {
          var stateManager, states;
          states = {
            foo: {
              initial: true
            },
            bar: {}
          };
          spyOn(Backbone.StateManager.prototype, 'triggerState');
          stateManager = new Backbone.StateManager(states);
          stateManager.initialize();
          return expect(stateManager.triggerState).toHaveBeenCalledWith('foo', jasmine.any(Object));
        });
      });
      describe('addState', function() {
        return it('sets the state passed to states with the states callback', function() {
          var bar, stateManager;
          stateManager = new Backbone.StateManager;
          stateManager.addState('foo', bar = function() {});
          return expect(stateManager.states.foo).toEqual(bar);
        });
      });
      describe('removeState', function() {
        return it('removes the state', function() {
          var stateManager;
          stateManager = new Backbone.StateManager;
          stateManager.states = {
            foo: function() {}
          };
          stateManager.removeState('foo');
          return expect(stateManager.states.foo).toBeUndefined();
        });
      });
      return describe('getCurrentState', function() {
        return it('returns the current state', function() {
          var currentState, foo, stateManager;
          stateManager = new Backbone.StateManager;
          stateManager.currentState = foo = {};
          currentState = stateManager.getCurrentState();
          return expect(currentState).toEqual(foo);
        });
      });
    });
    return describe('addStateManager', function() {
      it('creates a new StateManager', function() {
        var StateManager, spy, target;
        StateManager = Backbone.StateManager;
        spy = spyOn(Backbone, 'StateManager').andCallThrough();
        spy.__proto__ = StateManager;
        spy.prototype = StateManager.prototype;
        target = {
          states: {
            foo: 'bar'
          }
        };
        Backbone.StateManager.addStateManager(target);
        return expect(Backbone.StateManager).toHaveBeenCalledWith(jasmine.any(Object), jasmine.any(Object));
      });
      it('binds all of targets states methods to the target', function() {
        var target;
        spyOn(_, 'bind');
        target = {
          states: {
            foo: {
              bar: function() {}
            }
          }
        };
        Backbone.StateManager.addStateManager(target);
        return expect(_.bind).toHaveBeenCalledWith(jasmine.any(Function), target);
      });
      it('allows callthrough on the target for triggerState', function() {
        var target;
        target = {
          foo: 'bar'
        };
        spyOn(Backbone.StateManager.prototype, 'triggerState');
        Backbone.StateManager.addStateManager(target);
        expect(target.triggerState).toBeDefined();
        target.triggerState('foo');
        return expect(Backbone.StateManager.prototype.triggerState).toHaveBeenCalledWith('foo');
      });
      it('allows callthrough on the target for getCurrentState', function() {
        var target;
        target = {};
        spyOn(Backbone.StateManager.prototype, 'getCurrentState');
        Backbone.StateManager.addStateManager(target);
        expect(target.getCurrentState).toBeDefined();
        target.getCurrentState();
        return expect(Backbone.StateManager.prototype.getCurrentState).toHaveBeenCalled();
      });
      it('calls initialize on the state manager', function() {
        spyOn(Backbone.StateManager.prototype, 'initialize');
        Backbone.StateManager.addStateManager({});
        return expect(Backbone.StateManager.prototype.initialize).toHaveBeenCalled();
      });
      return it('does not call initialize if options.initialize is set to false(y)', function() {
        spyOn(Backbone.StateManager.prototype, 'initialize');
        _.each([false, null, 0], function(value) {
          Backbone.StateManager.addStateManager({}, {
            initialize: value
          });
          return expect(Backbone.StateManager.prototype.initialize).not.toHaveBeenCalled();
        });
        Backbone.StateManager.addStateManager({}, {
          initialize: void 0
        });
        return expect(Backbone.StateManager.prototype.initialize).toHaveBeenCalled();
      });
    });
  });

}).call(this);
