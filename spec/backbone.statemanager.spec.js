// Generated by CoffeeScript 1.3.3
(function() {
  var _this = this;

  describe('Backbone.StateManager', function() {
    beforeEach(function() {
      return _this.states = _.clone(spec.helper.states);
    });
    afterEach(function() {
      return delete _this.states;
    });
    it('exists under Backbone.StateManager', function() {
      return expect(Backbone.StateManager).toBeDefined();
    });
    describe('constructor', function() {
      it('creates a states object', function() {
        var stateManager;
        stateManager = new Backbone.StateManager;
        return expect(stateManager.states).toBeDefined();
      });
      return it('calls addState with passed state', function() {
        var stateManager;
        spyOn(Backbone.StateManager.prototype, 'addState');
        stateManager = new Backbone.StateManager(_this.states);
        return expect(stateManager.addState).toHaveBeenCalledWith('noTransitions', jasmine.any(Object));
      });
    });
    describe('prototype', function() {
      describe('initialize', function() {
        return it('calls triggerState on the first state found that has initial : true set on it', function() {
          var stateManager;
          spyOn(Backbone.StateManager.prototype, 'triggerState');
          stateManager = new Backbone.StateManager(_this.states);
          stateManager.initialize();
          return expect(stateManager.triggerState).toHaveBeenCalledWith('withInitial', jasmine.any(Object));
        });
      });
      describe('addState', function() {
        beforeEach(function() {
          _this.stateManager = new Backbone.StateManager;
          return _this.stateManager.states = _this.states;
        });
        afterEach(function() {
          return delete _this.stateManager;
        });
        it('sets the state passed to states with the states callback', function() {
          _this.stateManager.addState('noTransitions', _this.states.noTransitions);
          return expect(stateManager.states.noTransitions).toEqual(_this.states.noTransitions);
        });
        return it('triggers remove:state and passes state name', function() {
          spyOn(_this.stateManager, 'trigger');
          _this.stateManager.addState('noTransitions');
          return expect(stateManager.trigger).toHaveBeenCalledWith('add:state', 'noTransitions');
        });
      });
      describe('removeState', function() {
        beforeEach(function() {
          _this.stateManager = new Backbone.StateManager;
          return _this.stateManager.states = _this.states;
        });
        afterEach(function() {
          return delete _this.stateManager;
        });
        it('removes the state', function() {
          _this.stateManager.removeState('noTransitions');
          return expect(_this.stateManager.states.noTransitions).toBeUndefined();
        });
        return it('triggers remove:state and passes state name', function() {
          spyOn(_this.stateManager, 'trigger');
          _this.stateManager.removeState('noTransitions');
          return expect(stateManager.trigger).toHaveBeenCalledWith('remove:state', 'noTransitions');
        });
      });
      return describe('getCurrentState', function() {
        return it('returns the current state', function() {
          var currentState, stateManager;
          stateManager = new Backbone.StateManager;
          stateManager.currentState = _this.states.noTransitions;
          currentState = stateManager.getCurrentState();
          return expect(currentState).toEqual(_this.states.noTransitions);
        });
      });
    });
    return describe('addStateManager', function() {
      it('creates a new StateManager', function() {
        var StateManager, spy, target;
        StateManager = Backbone.StateManager;
        spy = spyOn(Backbone, 'StateManager').andCallThrough();
        spy.__proto__ = StateManager;
        spy.prototype = StateManager.prototype;
        target = {
          states: _this.states
        };
        Backbone.StateManager.addStateManager(target);
        return expect(Backbone.StateManager).toHaveBeenCalledWith(jasmine.any(Object), jasmine.any(Object));
      });
      it('binds all of targets states methods to the target', function() {
        var target;
        spyOn(_, 'bind');
        target = {
          states: _this.states
        };
        Backbone.StateManager.addStateManager(target);
        return expect(_.bind).toHaveBeenCalledWith(jasmine.any(Function), target);
      });
      it('allows callthrough on the target for triggerState', function() {
        var target;
        target = {
          states: _this.states
        };
        spyOn(Backbone.StateManager.prototype, 'triggerState');
        Backbone.StateManager.addStateManager(target);
        expect(target.triggerState).toBeDefined();
        target.triggerState('foo');
        return expect(Backbone.StateManager.prototype.triggerState).toHaveBeenCalledWith('foo');
      });
      it('allows callthrough on the target for getCurrentState', function() {
        var target;
        target = {};
        spyOn(Backbone.StateManager.prototype, 'getCurrentState');
        Backbone.StateManager.addStateManager(target);
        expect(target.getCurrentState).toBeDefined();
        target.getCurrentState();
        return expect(Backbone.StateManager.prototype.getCurrentState).toHaveBeenCalled();
      });
      it('calls initialize on the state manager', function() {
        spyOn(Backbone.StateManager.prototype, 'initialize');
        Backbone.StateManager.addStateManager({});
        return expect(Backbone.StateManager.prototype.initialize).toHaveBeenCalled();
      });
      return it('does not call initialize if options.initialize is set to false(y)', function() {
        spyOn(Backbone.StateManager.prototype, 'initialize');
        _.each([false, null, 0], function(value) {
          Backbone.StateManager.addStateManager({}, {
            initialize: value
          });
          return expect(Backbone.StateManager.prototype.initialize).not.toHaveBeenCalled();
        });
        Backbone.StateManager.addStateManager({}, {
          initialize: void 0
        });
        return expect(Backbone.StateManager.prototype.initialize).toHaveBeenCalled();
      });
    });
  });

}).call(this);
